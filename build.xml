<project default="build" basedir="." name="BUILD_bdtree">
  <description>
	Build BDTree.
  </description>

  <!-- ########## PROPERTIES  ########## -->
  <property name="binName" value="bdtree"/>
<!--  <property name="projName" value="bdtree"/>-->
<!--  <property name="projVersion" value="0.0.2"/>-->
  
  <!-- bdtree-related paths -->
  <property name="srcBDTree" location="src"/>
  <property name="buildBDTree" location="build"/>
  <property name="libBDTree" location="lib"/>
  <property name="release_dir" location="release"/>
  <property name="distBDTree" location="${buildBDTree}/dist"/>
  <property name="fxtemplates" location="fxtemplates"/>

  <!-- unit test related paths -->
  <property name="testReportsBDTree" location="${buildBDTree}/test-reports"/>
  <property name="buildTestBDTree" location="${buildBDTree}/build-test"/>
  <property name="build-lib" location="${buildBDTree}/build-lib"/>

  <!-- beast2-related paths -->
  <property name="beast2path" location="../beast2"/>
  <property name="libBeast2" location="${beast2path}/lib"/>
  <property name="srcBeast2" location="${beast2path}/src"/>
  <property name="beast2classpath" location="${beast2path}/build"/>

    <import file="${beast2path}/build.xml"/>

  <!-- BEAST 2 currently uses Zulu JDK 17 -->
  <property name="sourceVersion" value="17"/>
  <property name="targetVersion" value="17"/>

  <!-- classpath -->
  <path id="classpath">
	<pathelement path="${buildBDTree}"/>
      <fileset dir="${libBeast2}" includes="*.jar"/>
      <fileset dir="${libBeast2}/junit" includes="*.jar"/>
      <fileset dir="${libBDTree}" includes="*.jar"/>
	<pathelement path="${beast2classpath}"/> <!-- We need BEAST 2 compiled files to compile BDTree -->
  </path>

  <!-- Other -->
  <property name="BEASTmain" value="beast.app.BeastMCMC"/>
  <property name="report" value="${buildBDTree}/junitreport"/>

  <!-- ########## BUILDING  ########## -->
  <target name="init">
    <mkdir dir="${buildBDTree}"/>
    <mkdir dir="${distBDTree}"/>
    <mkdir dir="${libBDTree}"/>
    <mkdir dir="${testReportsBDTree}"/>
    <mkdir dir="${buildTestBDTree}"/>
    <mkdir dir="${build-lib}"/>
	<echo message="${ant.project.name}: ${ant.file}"/>

      <available file="version.xml" property="versionAvailable"/>
      <fail unless="versionAvailable">
          ** Required file version.xml does not exist. **
          If this is a new project, run "ant skeleton" from
          the command line to create the files required for
          your BEAST 2 package.
      </fail>

      <!-- Read package name and version from xml file -->
      <xmlproperty file="version.xml" prefix="fromVersionFile" />
      <property name="projName" value="${fromVersionFile.package(name)}" />
      <property name="projVersion" value="${fromVersionFile.package(version)}" />

  </target>

  <target name="clean">
    <delete dir="${buildBDTree}"/>
    <delete dir="${distBDTree}"/>
      <delete dir="${testReportsBDTree}"/>
      <delete dir="${buildTestBDTree}"/>
      <delete dir="${build-lib}"/>
  </target>

  <!-- Entry point: clean -> init -> compile -> unit tests -> release -->
  <target name="build" depends="clean,compile,test,release"
    description="Clean, build and release all we need to run this package.">
  </target>

  <!-- Compile -->
  <target name="compile" depends="init">
	<!-- Capture the path as a delimited property using the refid attribute -->
	<property name="myclasspath" refid="classpath"/>

	<!-- Emit the property to the ant console -->
	<echo message="Classpath = ${myclasspath}"/>

    <javac srcdir="${srcBDTree}" destdir="${buildBDTree}" classpath="${myclasspath}"
           target="${targetVersion}" source="${sourceVersion}"
		   includeantruntime="false"
	       debug="true"
	       fork="true"
		   memoryinitialsize="256m"
		   memorymaximumsize="1024m">
		<include name="**/**" />
    </javac>

	<echo message="Successfully compiled." />
  </target>

  <!-- Jar release -->
  <target name="release" depends="compile">

      <mkdir dir="${buildBDTree}/lib"/>

	<!-- Put everything in bdtree.vSomeVersion.jar -->
    <jar jarfile="${distBDTree}/lib/${binName}.v${projVersion}.jar">
		<manifest>
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Main-Class" value="${BEASTmain}"/>
	    </manifest>

        <!-- Add source and compiled files from BDTree -->
		<fileset dir="${buildBDTree}">
			<include name="**/*.class" />
            <exclude name="test/**" />
<!--			<include name="**/*.java" />-->
		</fileset>

        <!-- Add compiled files from beast2 (so we can actually run things) -->
<!--        <fileset dir="${beast2classpath}">-->
<!--            <include name="beast/**/*.class"/>-->
<!--            <include name="org/**/*.class"/>-->
<!--        </fileset>-->

        <!-- Bundles executables and a bunch of other files from these libs -->
        <!-- e.g., it creates /org/antlr/v4/runtime/a.class -->
<!--        <zipgroupfileset dir="${libBeast2}" includes="beagle.jar" />-->
<!--        <zipgroupfileset dir="${libBeast2}" includes="colt.jar" />-->
<!--        <zipgroupfileset dir="${libBeast2}" includes="commons-math3-*.jar" />-->
<!--        <zipgroupfileset dir="${libBeast2}" includes="jam.jar" />-->
<!--        <zipgroupfileset dir="${libBeast2}" includes="antlr-runtime-*.jar"/>-->
    </jar>

      <jar jarfile="${distBDTree}/lib/${binName}.v${projVersion}.src.jar" basedir="${src}" />

      <copy file="version.xml" todir="${distBDTree}" />
      
       <mkdir dir="${distBDTree}/fxtemplates" />
        <copy todir="${distBDTree}/fxtemplates">
            <fileset dir="${fxtemplates}" includes="*.xml" />
        </copy>

      <zip destfile="${binName}.v${projVersion}.zip" basedir="${distBDTree}" />
      <echo>** Package ${binName}.v${projVersion}.zip created successfuly! **</echo>

  </target>

  <!-- Unit testing -->
  <target name="test" depends="compile">
    <junit printsummary="yes" failureproperty="testFailed" showoutput="true">

      <classpath>
        <pathelement path="${myclasspath}"/>
        <pathelement path="${buildBDTree}" />
        <pathelement path="${buildTestBDTree}" />
        <fileset dir="${build-lib}" includes="*.jar"/>
      </classpath>

      <batchtest fork="yes" todir="${testReportsBDTree}">
        <fileset dir="${srcBDTree}">
          <include name="**/*Test.java"/>
        </fileset>

        <formatter type="plain"/>
      </batchtest>
    </junit>

    <fail if="testFailed" status="1" message="Unit test failed."/>
  </target>

</project>
